const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const { pool, checkConnection } = require('./bd.js');

const app = express();
const PORT = 3006;


app.use(cors());
app.use(express.json());


app.listen(PORT, async () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    await checkConnection();
});


app.post('/reg', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', req.body);
    
    const { 
        name, 
        surename, 
        nick, 
        email, 
        phone, 
        password, 
        personalData, 
        privacyPolicy, 
        notifications 
    } = req.body;

    
    if (!name || !surename || !nick || !email || !phone || !password) {
        return res.json({ 
            success: false, 
            message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        });
    }

   
    if (!personalData || !privacyPolicy) {
        return res.json({ 
            success: false, 
            message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏' 
        });
    }

    try {
        
        const [existingUsers] = await pool.execute(
            'SELECT user_id FROM users WHERE email = ? OR nick = ?',
            [email, nick]
        );

        if (existingUsers.length > 0) {
            return res.json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            });
        }

       
        const hashedPassword = await bcrypt.hash(password, 10);

        
        const [result] = await pool.execute(
            `INSERT INTO users (name, surname, nick, email, phone, password, role) 
             VALUES (?, ?, ?, ?, ?, ?, 'user')`,
            [name, surename, nick, email, phone, hashedPassword]
        );

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID:', result.insertId);

       

        res.json({ 
            success: true, 
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
            userId: result.insertId
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        
       
        let errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        if (error.code === 'ER_DUP_ENTRY') {
            if (error.sqlMessage.includes('email')) {
                errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
            } else if (error.sqlMessage.includes('nick')) {
                errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
            } else if (error.sqlMessage.includes('phone')) {
                errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
            }
        }
        
        res.json({ 
            success: false, 
            message: errorMessage 
        });
    }
});


app.get('/courses', async (req, res) => {
    try {
        const [courses] = await pool.execute(
            'SELECT course_id, name, price, description, duration_hours FROM courses WHERE is_active = TRUE'
        );
        res.json({ success: true, courses });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤' });
    }
});


app.post('/applications', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:', req.body);
    
    const { userId, courseId, startDate, paymentMethod } = req.body;

   
    if (!userId || !courseId || !startDate || !paymentMethod) {
        return res.json({ 
            success: false, 
            message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        });
    }

    
    if (!['cash', 'phone_transfer'].includes(paymentMethod)) {
        return res.json({ 
            success: false, 
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã' 
        });
    }

    try {
       
        const [users] = await pool.execute(
            'SELECT user_id FROM users WHERE user_id = ?',
            [userId]
        );

        if (users.length === 0) {
            return res.json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        
        const [courses] = await pool.execute(
            'SELECT course_id, name FROM courses WHERE course_id = ? AND is_active = TRUE',
            [courseId]
        );

        if (courses.length === 0) {
            return res.json({ 
                success: false, 
                message: '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' 
            });
        }

        
        const selectedDate = new Date(startDate);
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);

        if (selectedDate < currentDate) {
            return res.json({ 
                success: false, 
                message: '–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É' 
            });
        }

       
        const [result] = await pool.execute(
            `INSERT INTO applications (user_id, course_id, desired_start_date, payment_method, status) 
             VALUES (?, ?, ?, ?, 'new')`,
            [userId, courseId, startDate, paymentMethod]
        );

        console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', result.insertId);

        
        await pool.execute(
            `INSERT INTO application_status_history (application_id, old_status, new_status, changed_by, change_comment) 
             VALUES (?, NULL, 'new', ?, '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞')`,
            [result.insertId, userId]
        );

        res.json({ 
            success: true, 
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
            applicationId: result.insertId
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
        
        res.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏' 
        });
    }
});

app.post('/auth', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:', req.body);
    
    const { email, password } = req.body;

   
    if (!email || !password) {
        return res.json({ 
            success: false, 
            message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        });
    }

    try {
       
        const [users] = await pool.execute(
            'SELECT user_id, name, surname, nick, email, password, role FROM users WHERE email = ?',
            [email]
        );

        if (users.length === 0) {
            return res.json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const user = users[0];

        
        const isPasswordValid = await bcrypt.compare(password, user.password);
        
        if (!isPasswordValid) {
            return res.json({ 
                success: false, 
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
            });
        }

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.email);

      
        const { password: _, ...userWithoutPassword } = user;
        
        res.json({ 
            success: true, 
            message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
            user: userWithoutPassword
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        
        res.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
        });
    }
});


app.get('/test', (req, res) => {
    res.json({ message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!' });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–∑—ã–≤–∞–º–∏
app.get('/user-applications', async (req, res) => {
    const { userId } = req.query;

    if (!userId) {
        return res.json({ 
            success: false, 
            message: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
        });
    }

    try {
        const [applications] = await pool.execute(`
            SELECT 
                a.application_id,
                a.user_id,
                a.desired_start_date,
                a.payment_method,
                a.status,
                a.created_at,
                c.name as course_name,
                c.price,
                r.rating,
                r.review_id,
                CASE WHEN r.review_id IS NOT NULL THEN TRUE ELSE FALSE END as has_review
            FROM applications a
            JOIN courses c ON a.course_id = c.course_id
            LEFT JOIN reviews r ON a.application_id = r.application_id
            WHERE a.user_id = ?
            ORDER BY a.created_at DESC
        `, [userId]);

        res.json({ 
            success: true, 
            applications 
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
        res.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫' 
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
app.post('/reviews', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞:', req.body);
    
    const { userId, applicationId, rating } = req.body;

    if (!userId || !applicationId || !rating) {
        return res.json({ 
            success: false, 
            message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        });
    }

    if (rating < 1 || rating > 5) {
        return res.json({ 
            success: false, 
            message: '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5' 
        });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –µ–µ —Å—Ç–∞—Ç—É—Å
        const [applications] = await pool.execute(`
            SELECT a.application_id, a.status, a.user_id 
            FROM applications a 
            WHERE a.application_id = ? AND a.user_id = ?
        `, [applicationId, userId]);

        if (applications.length === 0) {
            return res.json({ 
                success: false, 
                message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        const application = applications[0];

        if (application.status !== 'completed') {
            return res.json({ 
                success: false, 
                message: '–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤
        const [existingReviews] = await pool.execute(
            'SELECT review_id FROM reviews WHERE application_id = ? AND user_id = ?',
            [applicationId, userId]
        );

        if (existingReviews.length > 0) {
            return res.json({ 
                success: false, 
                message: '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏' 
            });
        }

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
        const [result] = await pool.execute(
            `INSERT INTO reviews (user_id, application_id, rating) 
             VALUES (?, ?, ?)`,
            [userId, applicationId, rating]
        );

        console.log('‚úÖ –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω —Å ID:', result.insertId);

        res.json({ 
            success: true, 
            message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
            reviewId: result.insertId
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
        
        res.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞' 
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
app.get('/course-reviews', async (req, res) => {
    const { courseId } = req.query;

    try {
        const [reviews] = await pool.execute(`
            SELECT 
                r.rating,
                r.created_at,
                u.name,
                u.surname
            FROM reviews r
            JOIN applications a ON r.application_id = a.application_id
            JOIN users u ON r.user_id = u.user_id
            WHERE a.course_id = ? AND r.is_visible = TRUE
            ORDER BY r.created_at DESC
        `, [courseId]);

        res.json({ 
            success: true, 
            reviews 
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        res.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤' 
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
app.post('/admin-auth', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        const contentType = req.headers['content-type'];
        if (!contentType || !contentType.includes('application/json')) {
            return res.status(400).json({ 
                success: false, 
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type. –û–∂–∏–¥–∞–µ—Ç—Å—è application/json' 
            });
        }

        const { email, password } = req.body;

        console.log('üìß Email:', email);
        console.log('üîë –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω:', password ? '–¥–∞' : '–Ω–µ—Ç');

        if (!email || !password) {
            return res.status(400).json({ 
                success: false, 
                message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
            });
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const [users] = await pool.execute(
            'SELECT user_id, name, surname, nick, email, password, role FROM users WHERE email = ?',
            [email]
        );

        if (users.length === 0) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', email);
            return res.status(401).json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const user = users[0];
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.email, '–†–æ–ª—å:', user.role);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (user.role !== 'admin') {
            console.log('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —Ä–æ–ª–∏:', user.role);
            return res.status(403).json({ 
                success: false, 
                message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isPasswordValid = await bcrypt.compare(password, user.password);
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:', isPasswordValid ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ–≤–µ—Ä–Ω–æ');
        
        if (!isPasswordValid) {
            return res.status(401).json({ 
                success: false, 
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
            });
        }

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', user.email);

        const { password: _, ...userWithoutPassword } = user;
        
        res.json({ 
            success: true, 
            message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
            user: userWithoutPassword
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' 
        });
    }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/admin-test', (req, res) => {
    res.json({ 
        success: true, 
        message: '–°–µ—Ä–≤–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString()
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/admin-applications', async (req, res) => {
    try {
        const [applications] = await pool.execute(`
            SELECT 
                a.application_id,
                a.user_id,
                a.desired_start_date,
                a.payment_method,
                a.status,
                a.created_at,
                c.name as course_name,
                c.price,
                u.name as user_name,
                u.surname as user_surname,
                u.email as user_email
            FROM applications a
            JOIN courses c ON a.course_id = c.course_id
            JOIN users u ON a.user_id = u.user_id
            ORDER BY 
                CASE 
                    WHEN a.status = 'new' THEN 1
                    WHEN a.status = 'in_progress' THEN 2
                    WHEN a.status = 'completed' THEN 3
                    ELSE 4
                END,
                a.created_at DESC
        `);

        res.json({ 
            success: true, 
            applications 
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
        res.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫' 
        });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
app.put('/admin-applications/:id/status', async (req, res) => {
    const applicationId = req.params.id;
    const { newStatus, adminId } = req.body;

    if (!newStatus || !adminId) {
        return res.json({ 
            success: false, 
            message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
        });
    }

    if (!['new', 'in_progress', 'completed'].includes(newStatus)) {
        return res.json({ 
            success: false, 
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' 
        });
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        const [currentApps] = await pool.execute(
            'SELECT status FROM applications WHERE application_id = ?',
            [applicationId]
        );

        if (currentApps.length === 0) {
            return res.json({ 
                success: false, 
                message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
            });
        }

        const oldStatus = currentApps[0].status;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await pool.execute(
            'UPDATE applications SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE application_id = ?',
            [newStatus, applicationId]
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
        await pool.execute(
            `INSERT INTO application_status_history (application_id, old_status, new_status, changed_by, change_comment) 
             VALUES (?, ?, ?, ?, ?)`,
            [applicationId, oldStatus, newStatus, adminId, `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`]
        );

        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ${applicationId} –∏–∑–º–µ–Ω–µ–Ω —Å ${oldStatus} –Ω–∞ ${newStatus}`);

        res.json({ 
            success: true, 
            message: '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', error);
        
        res.json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' 
        });
    }
});

app.get('/check-db', async (req, res) => {
    const isConnected = await checkConnection();
    res.json({ databaseConnected: isConnected });
});


app.get('/users', async (req, res) => {
    try {
        const [users] = await pool.execute('SELECT user_id, name, surname, nick, email, phone, created_at FROM users');
        res.json({ success: true, users });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
});     